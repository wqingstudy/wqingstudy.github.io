<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>消息的幂等性</title>
      <link href="/posts/ac0bbfad.html"/>
      <url>/posts/ac0bbfad.html</url>
      
        <content type="html"><![CDATA[<h1 id="MQ之消息的幂等性问题？"><a href="#MQ之消息的幂等性问题？" class="headerlink" title="MQ之消息的幂等性问题？"></a>MQ之消息的幂等性问题？</h1><h2 id="什么是消息的幂等性？"><a href="#什么是消息的幂等性？" class="headerlink" title="什么是消息的幂等性？"></a>什么是消息的幂等性？</h2><p>幂等：在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。这是百度百科给出的幂等的概念。</p><p>消息的幂等性：就是即使多次收到了消息，也不会重复消费。所以保证消息的幂等性就是保证消息不会重复消费，这在开发中是很重要的。比如客户点击付款，如果点击了多次，那也只能扣一次费</p><h2 id="出现幂等性的情况"><a href="#出现幂等性的情况" class="headerlink" title="出现幂等性的情况"></a>出现幂等性的情况</h2><h3 id="生产者重复发送消息给MQ"><a href="#生产者重复发送消息给MQ" class="headerlink" title="生产者重复发送消息给MQ"></a>生产者重复发送消息给MQ</h3><p>生成者把消息发送给MQ之后，MQ收到消息在给生产者返回ack的时候，网络中断了。这时MQ明明已经接收到了消息，但是生产者没接收到确定消息，就会认为MQ没有接收到消息。因此，在网络重新连接后，生产者会把已经发送的消息再次发送到MQ，如果MQ没有去重措施的话，那么就接收到了重复的消息。</p><h3 id="MQ重复发送消息给消费者"><a href="#MQ重复发送消息给消费者" class="headerlink" title="MQ重复发送消息给消费者"></a>MQ重复发送消息给消费者</h3><p>消费者从MQ中拉取消息进行消费，当消费者已经消费了消息但还没向MQ返回ack的时候，消费者宕机或者网络断开了。所以消费者成功消费了消息的情况，MQ并不知道。当消费者重启或网络重连后，消费者再次去请求MQ拉取消息的时候，MQ会把已经消费的消息再次发送给消费者，如果消费者没有去重就直接消费，那么就会造成重复消费的情况。便会造成数据的不一致。</p><h2 id="保证消息幂等性的办法"><a href="#保证消息幂等性的办法" class="headerlink" title="保证消息幂等性的办法"></a>保证消息幂等性的办法</h2><h3 id="生成者不重复发送消息到MQ"><a href="#生成者不重复发送消息到MQ" class="headerlink" title="生成者不重复发送消息到MQ"></a>生成者不重复发送消息到MQ</h3><p>mq内部可以为每条消息生成一个全局唯一、与业务无关的消息id，当mq接收到消息时，会先根据该id判断消息是否重复发送，mq再决定是否接收该消息。</p><h3 id="消费者不重复消费"><a href="#消费者不重复消费" class="headerlink" title="消费者不重复消费"></a>消费者不重复消费</h3><p>消费者怎么保证不重复消费的关键在于消费者端做控制，因为MQ不能保证不重复发送消息，所以应该在消费者端控制：即使MQ重复发送了消息，消费者拿到了消息之后，要判断是否已经消费过，如果已经消费，直接丢弃。所以根据实际业务情况，有下面几种方式：</p><ol><li>如果从MQ拿到数据是要存到数据库，那么可以根据数据创建唯一约束，这样的话，同样的数据从MQ发送过来之后，当插入数据库的时候，会报违反唯一约束，不会插入成功的。（或者可以先查一次，是否在数据库中已经保存了，如果能查到，那就直接丢弃就好了）。</li><li>让生产者发送消息时，每条消息加一个全局的唯一id，然后消费时，将该id保存到redis里面。消费时先去redis里面查一下有么有，没有再消费。（其实原理跟第一点差不多）。</li><li>如果拿到的数据是直接放到redis的set中的话，那就不用考虑了，因为set集合就是自动有去重的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ概述</title>
      <link href="/posts/c80a4ce4.html"/>
      <url>/posts/c80a4ce4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-RabbitMQ-简介"><a href="#1-RabbitMQ-简介" class="headerlink" title="1. RabbitMQ 简介"></a>1. RabbitMQ 简介</h1><p>RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。</p><p>RabbitMQ 发展到今天，被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点：</p><ul><li><strong>可靠性：</strong> RabbitMQ使用一些机制来保证消息的可靠性，如持久化、传输确认及发布确认等。</li><li><strong>灵活的路由：</strong> 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们讲 RabbitMQ 核心概念的时候详细介绍到。</li><li><strong>扩展性：</strong> 多个RabbitMQ节点可以组成一个集群，也可以根据实际业务情况动态地扩展集群中节点。</li><li><strong>高可用性：</strong> 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队列仍然可用。</li><li><strong>支持多种协议：</strong> RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP、MQTT 等多种消息中间件协议。</li><li><strong>多语言客户端：</strong> RabbitMQ几乎支持所有常用语言，比如 Java、Python、Ruby、PHP、C#、JavaScript等。</li><li><strong>易用的管理界面：</strong> RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。</li><li><strong>插件机制：</strong> RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI机制。</li></ul><h1 id="2-RabbitMQ架构组成"><a href="#2-RabbitMQ架构组成" class="headerlink" title="2. RabbitMQ架构组成"></a>2. RabbitMQ架构组成</h1><p>RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906211027932.png" alt="image-20220906211027932"></p><p>核心概念：<br><strong>Server</strong>：又称Broker ,接受客户端的连接，实现AMQP实体服务。 安装rabbitmq-server<br><strong>Connection</strong>：连接，应用程序与Broker的网络连接 TCP&#x2F;IP&#x2F; 三次握手和四次挥手<br><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。<br><strong>Message</strong> :消息：服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。<br><strong>Virtual Host</strong> 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange<br><strong>Exchange</strong>：交换机，接受消息，根据路由键发送消息到绑定的队列。(&#x3D;&#x3D;不具备消息存储的能力&#x3D;&#x3D;)<br><strong>Bindings</strong>：Exchange和Queue之间的虚拟连接，binding中可以保护多个routing key.<br><strong>Routing key</strong>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。<br><strong>Queue</strong>：队列：也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</p><h1 id="3-四大核心概念"><a href="#3-四大核心概念" class="headerlink" title="3. 四大核心概念"></a>3. 四大核心概念</h1><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/96388546.jpg" alt="图1-RabbitMQ 的整体模型架构"></p><p><strong>生产者</strong>：产生数据发送消息的程序是生产者。</p><p><strong>交换机</strong>：交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个是由交换机类型决定的。</p><p><strong>队列</strong>：队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。</p><p><strong>消费者</strong>：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者</p><h1 id="4-RabbitMQ的运行流程"><a href="#4-RabbitMQ的运行流程" class="headerlink" title="4. RabbitMQ的运行流程"></a>4. RabbitMQ的运行流程</h1><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudy2704cee9-3595-45de-892d-ee658e848806.png" alt="img"></p><h1 id="5-RabbitMQ工作模式"><a href="#5-RabbitMQ工作模式" class="headerlink" title="5. RabbitMQ工作模式"></a>5. RabbitMQ工作模式</h1><p>RabbitMQ提供6种模式，分别是 Hello World、Work Queues、Publish&#x2F;Subscribe、Routing、Topics、RPC。本文详细讲述了前5种，并给出代码实现和思路。其中 Publish&#x2F;Subscribe、Routing、Topics 三种模式可以统一归为 Exchange 模式，只是创建时交换机的类型不一样，分别是 fanout、direct、topic 三种交换机类型</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/41d4a9039e12467eff83e0d3dee7fb0b.png" alt="image-20210506152342994"></p><p><strong>注意</strong>：简单模式和工作模式虽然途中没有画出交换机，但是都会有一个默认的交换机，类型为<code>direct</code></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907204805593.png" alt="image-20220907204805593"></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识消息队列</title>
      <link href="/posts/7b6d61fe.html"/>
      <url>/posts/7b6d61fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-MQ的基本概念"><a href="#1-MQ的基本概念" class="headerlink" title="1. MQ的基本概念"></a>1. MQ的基本概念</h1><h2 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h2><p><code>MQ</code>(message queue)，从字面意思上看就个 FIFO 先入先出的队列，只不过队列中存放的内容是 message 而已，它是一种具有接收数据、存储数据、发送数据等功能的技术服务。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/aafed35b9c410781efff4ad0394609ac.png" alt="img"></p><p>在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务，用于上下游传递消息。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p><h2 id="1-2-为啥要用MQ"><a href="#1-2-为啥要用MQ" class="headerlink" title="1.2 为啥要用MQ"></a>1.2 为啥要用MQ</h2><p>常见的MQ消息中间件有很多，例如<code>ActiveMQ</code>、<code>RabbitMQ</code>、<code>Kafka</code>、<code>RocketMQ</code>等等。那么为什么我们要使用它呢？因为它能很好的帮我解决一些复杂特殊的场景：</p><h3 id="1-高并发下的流量消峰"><a href="#1-高并发下的流量消峰" class="headerlink" title="(1) 高并发下的流量消峰"></a>(1) 高并发下的流量消峰</h3><p>举个例子，假设某订单系统每秒最多能处理一万次订单，也就是最多承受的10000qps，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/6226ae19dc6d6bdf81756ab1e63cea9f.png" alt="image-20211202204728303"></p><h3 id="2-应用解耦"><a href="#2-应用解耦" class="headerlink" title="(2) 应用解耦"></a>(2) 应用解耦</h3><p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907194052074.png" alt="image-20220907194052074"></p><h3 id="3-异步处理"><a href="#3-异步处理" class="headerlink" title="(3) 异步处理"></a>(3) 异步处理</h3><p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息队列，可以很方便解决这个问题，A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907194445140.png" alt="image-20220907194445140"></p><hr><h1 id="2-常用的MQ"><a href="#2-常用的MQ" class="headerlink" title="2. 常用的MQ"></a>2. 常用的MQ</h1><h2 id="2-1-ActiveMQ"><a href="#2-1-ActiveMQ" class="headerlink" title="2.1 ActiveMQ"></a>2.1 ActiveMQ</h2><p><code>优点</code>：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据</p><p><code>缺点</code>：官方社区现在对 ActiveMQ 5.x <strong>维护越来越少，高吞吐量场景较少使用</strong>。</p><h2 id="2-2-Kafka"><a href="#2-2-Kafka" class="headerlink" title="2.2 Kafka"></a>2.2 Kafka</h2><p>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为<strong>大数据而生</strong>的消息中间件，以其<strong>百万级 TPS</strong> 的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。</p><p><code>优点</code>：性能卓越，吞吐量高，单机写入 TPS 约在百万条&#x2F;秒，时效性 ms 级，可用性非常高；其次 kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据导致服务不可用，消费者采用 Pull 方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次。此外 kafka 有优秀的第三方 Kafka Web 管理界面 Kafka-Manager，在日志领域比较成熟，被多家公司和多个开源项目使用；最后 kafka 在功能支持方便面它功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及<strong>日志采集</strong>被大规模使用。</p><p><code>缺点</code>：Kafka 单机超过 64 个队列&#x2F;分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，<strong>社区更新较慢</strong>；</p><p><code>选用场景</code>：Kafka 主要特点是基于Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生<strong>大量数据</strong>的互联网服务的数据收集业务。<strong>大型公司</strong>建议可以选用，如果有<strong>日志采集</strong>功能，肯定是首选 kafka 了。</p><h2 id="2-3-RocketMQ"><a href="#2-3-RocketMQ" class="headerlink" title="2.3 RocketMQ"></a>2.3 RocketMQ</h2><p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p><p><code>优点</code>：<strong>单机吞吐量十万级</strong>，可用性非常高，采用分布式架构，<strong>消息可以做到 0 丢失</strong>，MQ 功能较为完善，扩展性好，<strong>支持 10 亿级别的消息堆积</strong>，不会因为堆积导致性能下降，采用 java 语言实现。</p><p><code>缺点</code>：<strong>支持的客户端语言不多</strong>，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在MQ核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码。</p><p><code>选用场景</code>：天生为<strong>金融互联网</strong>领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。</p><h2 id="2-4-RabbitMQ"><a href="#2-4-RabbitMQ" class="headerlink" title="2.4 RabbitMQ"></a>2.4 RabbitMQ</h2><p>2007 年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是<strong>当前最主流的消息中间件之一</strong>。</p><p><code>优点</code>：由于 erlang 语言的<strong>高并发特性</strong>，性能较好；<strong>吞吐量到万级</strong>，MQ 功能比较完备、健壮、稳定、易用、跨平台、<strong>支持多种语言</strong>如Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用，<strong>社区活跃度高</strong>；更新频率相当高。</p><p><code>缺点</code>：商业版需要收费，学习成本较高。</p><p><code>选用场景</code>：结合 erlang 语言本身的并发优势，性能好<strong>时效性微秒级，社区活跃度也比较高</strong>，管理界面用起来十分方便，如果你的<strong>数据量没有那么大</strong>，中小型公司优先选择功能比较完备的 RabbitMQ。</p><hr><h1 id="3-消息队列协议"><a href="#3-消息队列协议" class="headerlink" title="3. 消息队列协议"></a>3. 消息队列协议</h1><h2 id="3-1-什么是协议"><a href="#3-1-什么是协议" class="headerlink" title="3.1 什么是协议"></a>3.1 什么是协议</h2><p>协议：是在TCP&#x2F;IP协议基础之上构建的种约定成的规范和机制，目的是让客户端进行沟通和通讯。并且这种协议下规范必须具有<code>持久性</code>，<code>高可用</code>，<code>高可靠</code>的性能。</p><p>为什么不直接采用TCP&#x2F;IP协议去传递消息？因为TCP&#x2F;IP协议太过于简单，并不能承载消息的内容和载体，因此在此之上增加一些内容，给消息的传递分发高可用提供基础。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/4d0801aa2bf988afcf3d67f681e68e9a.png" alt="img"></p><p>我们知道消息中间件负责数据的传递，存储，和分发消费三个部分，数据的存储和分发的过程中肯定要遵循某种约定成俗的规范，是采用底层的TCP&#x2F;IP，UDP协议还是在这基础上自己构建等，而这些约定成俗的规范就称之为：协议。</p><blockquote><p>所谓协议是指：</p><ol><li>计算机底层操作系统和应用程序通讯时共同遵守的组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流。</li><li>和一般的网络应用程序的不同，它主要负责数据的接受和传递，所以性能比较的高。</li><li>协议对数据格式和计算机之间交换数据都必须严格遵守规范。</li></ol></blockquote><h2 id="3-2-网络协议的三要素"><a href="#3-2-网络协议的三要素" class="headerlink" title="3.2 网络协议的三要素"></a>3.2 网络协议的三要素</h2><p><strong>语法</strong>：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序。</p><p><strong>语义</strong>：语义是解控制信息每个部分的意义。它规定了需要发出何种控制信息以及完成的动作与做出什么样的响应。</p><p><strong>时序</strong>：时序是对事件发生顺序的详细说明。</p><blockquote><p>类比http请求协议</p><ol><li>语法：htp规定了请求报文和响应报文的格式</li><li>语义：客户端主动发起请求称之为请求。（这是一种定义，同时你发起的是post&#x2F;get请求）</li><li>时序：一个请求对应个响应。（定先有请求在有响应，这个是时序）</li></ol></blockquote><p>而消息中间件采用的并不是http协议，而常见的消息中间件协议有：<code>OpenWire</code>、<code>AMQP</code>、<code>MQTT</code>、<code>Kafka</code>、<code>OpenMessage</code>协议</p><blockquote><p>面试题：为什么消息中间件不直接使用http协议呢？</p><ol><li>因为http请求报文头和响应报文头是比较复杂的，包含了cookie、数据的加密解密、状态码、晌应码等附加的功能，但是对于个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就够，要追求的是高性能。尽量简洁，快速。</li><li>大部分情况下http大部分都是短链接，在实际的交互过程中，一个请求到响应很有可能会中断，中断以后就不会就行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取消息的过程，出现问题和故障要对数据或消息就行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行</li></ol></blockquote><h2 id="3-3-常用消息中间件协议"><a href="#3-3-常用消息中间件协议" class="headerlink" title="3.3 常用消息中间件协议"></a>3.3 常用消息中间件协议</h2><ol><li><code>AMQP</code>协议（Advanced Message Queuing Protocol—高级消息队列协议）</li></ol><p>它由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。</p><p><strong>特性</strong>：分布式事务支、消息的持久化支持、高性能和高可靠的消息处理优势</p><p>AMQP典型的实现者是<code>RabbitMQ</code>、<code>ACTIVEMQ</code>等，其中<code>RabbitMQ</code>由<code>Erlang</code>开发</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/2a4929e9c4d515f437720803e8f1e039.png" alt="img"></p><ol start="2"><li><code>MQTT</code>协议（Message Queueing Telemetry Transport—消息队列遥测传输协议）</li></ol><p>它是一种基于发布&#x2F;订阅（publish&#x2F;subscribe）模式的”轻量级”通讯协议，该协议构建于TCP&#x2F;IP协议上，由IBM在1999年发布。</p><p><strong>特点</strong>：轻量、结构简单、传输快、不支持事务、没有持久化设计</p><p><strong>应用场景</strong>：适用于计算能力有限、低带宽、网络不稳定的场景</p><p><strong>支持者</strong>：<code>RabbitMQ</code>、<code>ACTIVEMQ</code>（默认情况下关闭，需要打开）</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/826b0561588769b48e57f37159806d1a.png" alt="img"></p><ol start="3"><li><code>OpenMessage</code>协议</li></ol><p>是近几年由阿里、雅虎和滴滴出行、 Stremalio等公司共同参与创立的分布式消息中间件、流处理等领域的应用开发标准。</p><p><strong>特点</strong>：结构简单、解析速度快、支持事务和持久化设计</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudy579c94ed-0947-439e-95e7-2ca6b425dc79.png" alt="img"></p><ol start="4"><li><code>Kafka</code>协议</li></ol><p>基于TCP&#x2F;IP的二进制协议。消息内部是通过长度来分割，由些基本数据类型组成。</p><p><strong>特点</strong>：结构简单、解析速度快、无事务支持、有持久化设计</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudy707bddcb-ef4a-44e0-96f1-3c2b16c02028.png" alt="img"></p><hr><h1 id="4-消息队列持久化"><a href="#4-消息队列持久化" class="headerlink" title="4. 消息队列持久化"></a>4. 消息队列持久化</h1><p>持久化简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907200818082.png" alt="image-20220907200818082"></p><p><strong>常见的持久化方式和对比</strong>：</p><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>文件存储</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据库</td><td>支持</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td></tr></tbody></table><hr><h1 id="5-消息的分发策略"><a href="#5-消息的分发策略" class="headerlink" title="5. 消息的分发策略"></a>5. 消息的分发策略</h1><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/0574a184186b5ba3df8582f81cccca67.png" alt="img"></p><p>MQ消息队列有如下几个角色：</p><p><code>Producer</code>：消息生产者。负责产生和发送消息到 Broker<br><code>Broker</code>：消息处理中心。负责消息存储、确认、重试等，一般其中会包含多个 queue<br><code>Consumer</code>：消息消费者。负责从 Broker 中获取消息，并进行相应处理<br>生产者产生消息后，MQ进行存储，消费者如何获得消息呢？</p><p>一般的获取方式无外乎外推（push）或者（pull）两种方式，典型的git就有推拉机制，我们发送的http请求就是一种典型的拉取数据库数据返回的过程。而消息队列MQ是一种推送过程，而这些推机制会适用到很多的业务场景，也有很多对应的推机制策略</p><p><strong>场景分析一</strong></p><p>比如我在APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被那个系统或者那些服务或者系统进行消费，此时就需要一个<strong>消费策略</strong>，或称为消费的方法论。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907201155079.png" alt="image-20220907201155079"></p><p><strong>场景分析二</strong></p><p>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持<strong>消息重试机制策略</strong>。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907201611001.png" alt="image-20220907201611001"></p><h2 id="5-1-消息分发策略的机制和对比"><a href="#5-1-消息分发策略的机制和对比" class="headerlink" title="5.1 消息分发策略的机制和对比"></a>5.1 消息分发策略的机制和对比</h2><table><thead><tr><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th><th></th></tr></thead><tbody><tr><td>发布订阅</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>轮询分发</td><td>支持</td><td>支持</td><td>支持</td><td>&#x2F;</td></tr><tr><td>公平分发</td><td>&#x2F;</td><td>支持</td><td>支持</td><td>&#x2F;</td></tr><tr><td>重发</td><td>支持</td><td>支持</td><td>&#x2F;</td><td>支持</td></tr><tr><td>消息拉取</td><td>&#x2F;</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><hr><h1 id="6-消息队列高可用和高可靠"><a href="#6-消息队列高可用和高可靠" class="headerlink" title="6. 消息队列高可用和高可靠"></a>6. 消息队列高可用和高可靠</h1><h2 id="6-1-什么是高可用机制"><a href="#6-1-什么是高可用机制" class="headerlink" title="6.1 什么是高可用机制"></a>6.1 什么是高可用机制</h2><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力。<br>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU,内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署。来达到高可用的目的。</p><h3 id="集群模式1-Master-slave主从共享数据的部署方式"><a href="#集群模式1-Master-slave主从共享数据的部署方式" class="headerlink" title="集群模式1 - Master-slave主从共享数据的部署方式"></a>集群模式1 - Master-slave主从共享数据的部署方式</h3><p>生产者讲消费发送到Master节点，所有的都连接这个消息队列共享这块数据区域，Master节点负责写入，一旦Master挂掉，slave节点继续服务。从而形成高可用，</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907202206079.png" alt="image-20220907202206079"></p><h3 id="集群模式2-Master-slave主从同步部署方式"><a href="#集群模式2-Master-slave主从同步部署方式" class="headerlink" title="集群模式2 - Master- slave主从同步部署方式"></a>集群模式2 - Master- slave主从同步部署方式</h3><p>这种模式写入消息同样在Master主节点上，但是主节点会同步数据到slave节点形成副本，和zookeeper或者redis主从机制很类同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点就行消费，以为消息的拷贝和同步会暂用很大的带宽和网络资源。在后续的rabbtmq中会有使用。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220907202742659.png" alt="image-20220907202742659"></p><h3 id="集群模式3-多主集群同步部署模式"><a href="#集群模式3-多主集群同步部署模式" class="headerlink" title="集群模式3 - 多主集群同步部署模式"></a>集群模式3 - 多主集群同步部署模式</h3><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudy402ac1b2-2d51-493c-9bc0-37329912dd2b.png" alt="img"></p><p>和上面的区别不是特别的大，但是它的写入可以往任意节点去写入。</p><h3 id="集群模式4-多主集群转发部署模式"><a href="#集群模式4-多主集群转发部署模式" class="headerlink" title="集群模式4 - 多主集群转发部署模式"></a>集群模式4 - 多主集群转发部署模式</h3><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudycc632a4a-a382-4303-85f9-8f63e93cea7a.png" alt="img"></p><p>如果你插入的数据是broker-1中，元数据信息会存储数据的相关描述和记录存放的位置（队列）。<br>它会对描述信息也就是元数据信息就行同步，如果消费者在broker-2中进行消费，发现自己几点没有对应的消息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他会去联系其他的黄牛询问，如果有就返回。</p><h3 id="集群模式5-Master-slave与Breoker-cluster组合的方案"><a href="#集群模式5-Master-slave与Breoker-cluster组合的方案" class="headerlink" title="集群模式5 Master-slave与Breoker-cluster组合的方案"></a>集群模式5 Master-slave与Breoker-cluster组合的方案</h3><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudya02ff996-446e-4d39-b230-dadb183269e5.png" alt="img"></p><p>实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。</p><p>这么集群模式，具体在后续的课程中会进行一个分析和讲解。他们的最终目的都是为保证：消息服务器不会挂掉，出现了故障依然可以抱着消息服务继续使用。</p><blockquote><p>反正终归三句话：<br>1：要么消息共享，<br>2：要么消息同步<br>3：要么元数据共享</p></blockquote><h2 id="6-2-什么是高可靠机制"><a href="#6-2-什么是高可靠机制" class="headerlink" title="6.2 什么是高可靠机制"></a>6.2 什么是高可靠机制</h2><p>所谓高可用是指：是指系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。<br>在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。<br>如何保证中间件消息的可靠性呢？可以从两个方面考虑：<br>1：消息的传输：通过协议来保证系统间数据解析的正确性。<br>2：消息的存储可靠：通过持久化来保证消息的可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之简单模式</title>
      <link href="/posts/7f2e4007.html"/>
      <url>/posts/7f2e4007.html</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ-简单模式"><a href="#RabbitMQ-简单模式" class="headerlink" title="RabbitMQ-简单模式"></a>RabbitMQ-简单模式</h1><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/python-one.png" alt="img" style="zoom:150%;" /><p>RabbitMQ 中最简单的<code>Hello World</code>模式。也就是一个生产者、一个消费者、一个队列；生产者P发送消息到队列Q，一个消费者C接收消息。</p><h2 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1. 实现步骤"></a>1. 实现步骤</h2><p>1：jdk1.8<br>2：构建两个maven工程<br>3：导入rabbitmq的maven依赖<br>4：启动rabbitmq-server服务<br>5：定义生产者<br>6：定义消费者<br>7：观察消息的在rabbitmq-server服务中的过程</p><h2 id="2-构建Maven工程"><a href="#2-构建Maven工程" class="headerlink" title="2. 构建Maven工程"></a>2. 构建Maven工程</h2><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906202444360.png" alt="image-20220906202444360"></p><h2 id="3-导入rabbitmq的maven依赖"><a href="#3-导入rabbitmq的maven依赖" class="headerlink" title="3. 导入rabbitmq的maven依赖"></a>3. 导入rabbitmq的maven依赖</h2><h3 id="3-1-Java原生依赖"><a href="#3-1-Java原生依赖" class="headerlink" title="3.1 Java原生依赖"></a>3.1 Java原生依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Spring依赖"><a href="#3-2-Spring依赖" class="headerlink" title="3.2 Spring依赖"></a>3.2 Spring依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-SpringBoot依赖"><a href="#3-3-SpringBoot依赖" class="headerlink" title="3.3 SpringBoot依赖"></a>3.3 SpringBoot依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面根据自己的项目环境进行选择即可。</p><h2 id="4-启动rabbitmq-server服务"><a href="#4-启动rabbitmq-server服务" class="headerlink" title="4. 启动rabbitmq-server服务"></a>4. 启动rabbitmq-server服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><p>云服务器需要开发 <code>5672</code> 端口</p><h2 id="5-定义生产者"><a href="#5-定义生产者" class="headerlink" title="5. 定义生产者"></a>5. 定义生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 王清</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6 20:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;QUEUE1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有中间件技术都是基于tcp/ip协议基础之上构建新型的协议规范，中不过rabbitmq遵循的是amqp</span></span><br><span class="line">        <span class="comment">//ip port</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建连接工程</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;124.222.204.165&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2. 创建连接Connection</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//3. 通过连接获取通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//4. 通过创建交换机，声明队列，绑定关系，路由key，发送消息，和接收消息</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                @params1 对列的名称</span></span><br><span class="line"><span class="comment">                @params2 是否要持久化【durable】</span></span><br><span class="line"><span class="comment">                @params3 排他性，是否独占队列</span></span><br><span class="line"><span class="comment">                @params4 是否自动删除，随着最后一个消费者消息完毕后是否把队列自动删除</span></span><br><span class="line"><span class="comment">                @params5 携带一些附加参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//5. 准备消息内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello RabbitMQ&quot;</span>;</span><br><span class="line">            <span class="comment">//6. 发送消息给队列queue</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               @params1: 交换机exchange</span></span><br><span class="line"><span class="comment">               @params2: 队列名称/routing</span></span><br><span class="line"><span class="comment">               @params3: 属性配置</span></span><br><span class="line"><span class="comment">               @params4: 发送消息的内容</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7. 关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="literal">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行发送，这个时候可以在web控制台查看到这个队列queue的信息</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906203423424.png" alt="image-20220906203423424"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906203219825.png" alt="image-20220906203219825"></p><p>点击队列名称后</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906203939544.png" alt="image-20220906203939544"></p><p>进行预览和获取消息进行测试</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/kuangstudydc7c7bf4-bffe-4821-92da-c1c8563631d3.png" alt="img"></p><h2 id="6-定义消费者"><a href="#6-定义消费者" class="headerlink" title="6. 定义消费者"></a>6. 定义消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 王清</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6 20:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;QUEUE1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有中间件技术都是基于tcp/ip协议基础之上构建新型的协议规范，中不过rabbitmq遵循的是amqp</span></span><br><span class="line">        <span class="comment">//ip port</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建连接工程</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;124.222.204.165&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2. 创建连接Connection</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//3. 通过连接获取通道Channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//4. 通过创建交换机，声明队列，绑定关系，路由key，发送消息，和接收消息</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                @params1 对列的名称</span></span><br><span class="line"><span class="comment">                @params2 是否要持久化【durable】</span></span><br><span class="line"><span class="comment">                @params3 排他性，是否独占队列</span></span><br><span class="line"><span class="comment">                @params4 是否自动删除，随着最后一个消费者消息完毕后是否把队列自动删除</span></span><br><span class="line"><span class="comment">                @params5 携带一些附加参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到的消息是: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">            &#125;,message-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收失败了&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始接收消息&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7. 关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="literal">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的安装及使用</title>
      <link href="/posts/deb7f423.html"/>
      <url>/posts/deb7f423.html</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ的安装及使用"><a href="#RabbitMQ的安装及使用" class="headerlink" title="RabbitMQ的安装及使用"></a>RabbitMQ的安装及使用</h1><p><strong>RabbitMQ</strong>是一个开源的遵循 AMQP协议实现的基于 <strong>Erlang</strong>语言编写，<strong>即需要先安装部署Erlang环境再安装RabbitMQ环境。</strong></p><p>RabbitMQ的版本依赖：<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ Erlang Version Requirements — RabbitMQ</a></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906081602438.png" alt="image-20220906081602438"></p><h2 id="1-Erlang下载安装"><a href="#1-Erlang下载安装" class="headerlink" title="1. Erlang下载安装"></a>1. Erlang下载安装</h2><p><a href="https://packagecloud.io/rabbitmq/erlang?page=1">rabbitmq&#x2F;erlang - Packages · packagecloud</a></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906084109289.png" alt="image-20220906084109289"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906084216597.png" alt="image-20220906084216597"></p><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.3.4.11-1.el7.x86_64.rpm/download.rpm</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906084435441.png" alt="image-20220906084435441"></p><p>下载完成后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall erlang-23.3.4.11-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906084807792.png" alt="image-20220906084807792"></p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -v</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906084946338.png" alt="image-20220906084946338"></p><h2 id="2-安装socat"><a href="#2-安装socat" class="headerlink" title="2. 安装socat"></a>2. 安装socat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y socat</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906085110989.png" alt="image-20220906085110989"></p><h2 id="3-安装rabbitmq"><a href="#3-安装rabbitmq" class="headerlink" title="3. 安装rabbitmq"></a>3. 安装rabbitmq</h2><p>下面依旧通过wget命令完成RabbitMQ的下载。下面演示操作过程：</p><p>RabbitMQ下载链接：<a href="https://packagecloud.io/rabbitmq/rabbitmq-server">rabbitmq&#x2F;rabbitmq-server - Packages · packagecloud</a></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906085555265.png" alt="image-20220906085555265"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906085714624.png" alt="image-20220906085714624"></p><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/7/rabbitmq-server-3.9.16-1.el7.noarch.rpm/download.rpm</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906085912492.png" alt="image-20220906085912492"></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh rabbitmq-server-3.9.16-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906090417465.png" alt="image-20220906090417465"></p><hr><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h2><ol><li>添加开机启动 RabbitMQ 服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol start="2"><li>启动服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol start="3"><li>查看状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server.service</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906091141319.png" alt="image-20220906091141319"></p><ol start="4"><li>重启服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol start="5"><li>关闭服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop rabbitmq-server.service</span><br></pre></td></tr></table></figure><h2 id="5-安装浏览器插件"><a href="#5-安装浏览器插件" class="headerlink" title="5. 安装浏览器插件"></a>5. 安装浏览器插件</h2><p><strong>默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效</strong></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906091735025.png" alt="image-20220906091735025"></p><p><strong>安装完毕以后，重启服务即可</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rabbitmq-server.service</span><br></pre></td></tr></table></figure><p><strong>在浏览器中访问</strong></p><p>说明：rabbitmq有一个默认账号和密码是：guest 默认情况只能在localhost本机下访问，所以需要添加一个远程登录的用户。</p><p><a href="http://ip:15672/">http://ip:15672</a></p><p>默认15672端口未开放，在服务器开放端口</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092218601.png" alt="image-20220906092218601"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092250904.png" alt="image-20220906092250904"></p><h2 id="6-授权账号和密码"><a href="#6-授权账号和密码" class="headerlink" title="6. 授权账号和密码"></a>6. 授权账号和密码</h2><ol><li>新增用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092413091.png" alt="image-20220906092413091"></p><ol start="2"><li>用户分配操作权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>用户级别：</p><ul><li>administrator 可以登录控制台、查看所有信息、可以对rabbitmq进行管理</li><li>monitoring 监控者 登录控制台，查看所有信息</li><li>policymaker 策略制定者 登录控制台,指定策略</li><li>managment 普通管理员 登录控制台</li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092541843.png" alt="image-20220906092541843"></p><ol start="3"><li>为用户添加资源权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p / admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092634963.png" alt="image-20220906092634963"></p><ol start="4"><li>查看当前用户和角色</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906092714900.png" alt="image-20220906092714900"></p><p>小结</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user 账号 密码</span><br><span class="line">rabbitmqctl set_user_tags 账号 administrator</span><br><span class="line">rabbitmqctl change_password Username Newpassword 修改密码</span><br><span class="line">rabbitmqctl delete_user Username 删除用户</span><br><span class="line">rabbitmqctl list_users 查看用户清单</span><br><span class="line">rabbitmqctl set_permissions -p / 用户名 <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> 为用户设置administrator角色</span><br><span class="line">rabbitmqctl set_permissions -p / root <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-RabbitMQ的角色分类"><a href="#7-RabbitMQ的角色分类" class="headerlink" title="7. RabbitMQ的角色分类"></a>7. RabbitMQ的角色分类</h2><ol><li><p>none</p><ul><li>不能访问management plugin</li></ul></li><li><p>management：查看自己相关节点信息</p><ul><li>列出自己可以通过AMQP登入的虚拟机</li><li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li><li>查看和关闭自己的channels和connections</li><li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts中的活动信息。</li></ul></li><li><p>Policymaker</p><ul><li>包含management所有权限</li><li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li></ul></li><li><p>Monitoring</p><ul><li>包含management所有权限</li><li>罗列出所有的virtual hosts，包括不能登录的virtual hosts。</li><li>查看其他用户的connections和channels信息</li><li>查看节点级别的数据如clustering和memory使用情况</li><li>查看所有的virtual hosts的全局统计信息。</li></ul></li><li><p>Administrator</p><ul><li>最高权限</li><li>可以创建和删除virtual hosts</li><li>可以查看，创建和删除users</li><li>查看创建permisssions</li><li>关闭所有用户的connections</li></ul></li></ol><p><strong>具体操作的界面</strong></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220906094434188.png" alt="image-20220906094434188"></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的内存布局</title>
      <link href="/posts/6ab896ee.html"/>
      <url>/posts/6ab896ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p>《深入理解Java虚拟机是这样定义的》：</p><p>在HotSpot虚拟机里， 对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220819232202187.png" alt="image-20220819232202187"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220819232507000.png" alt="image-20220819232507000"></p><blockquote><p>对象内部结构分为：对象头、实例数据、对齐填充（保证8个字节的倍数）。<br>对象头分为对象标记（markOop）和类元信息（klassOop），类元信息存储的是指向该对象类元数据（klass）的首地址。</p></blockquote><h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>HotSpot虚拟机对象的对象头部分包括两类信息。第一类是用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特， 官方称它为“&#x3D;&#x3D;Mark Word&#x3D;&#x3D;”。对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的最大限度，但对象头里的信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机中，如对象未被同步锁锁定的状态下，Mark Word的32个比特存储空间中的25个比特用于存储对象哈希码，4个比特用于存储对象分代年龄，2个比特用于存储锁标志位，1个比特固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如表所示。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220819232005720.png" alt="image-20220819232005720"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220819234715202.png" alt="image-20220819234715202"></p><p>在64位系统中，Mark Word占了8个字节，类型指针占了8个字节，一共是16个字节,上图中说对象头为12字节的原因为：指针压缩。</p><ul><li>默认存储对象的HashCode、分代年龄和锁标志位等信息。</li><li>这些信息都是与对象自身定义无关的数据，所以MarkWord被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。</li><li>它会根据对象的状态复用自己的存储空间，也就是说在运行期间MarkWord里存储的数据会随着锁标志位的变化而变化。</li></ul><p>Hotspot术语表官网：<a href="https://openjdk.org/groups/hotspot/docs/HotSpotGlossary.html">HotSpot Glossary of Terms (openjdk.org)</a></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820120058751.png" alt="image-20220820120058751"></p><h2 id="类元信息"><a href="#类元信息" class="headerlink" title="类元信息"></a>类元信息</h2><p>&#x3D;&#x3D;对象头的另外一部分是类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例&#x3D;&#x3D;。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点我们会在下一节具体讨论。此外， 如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820105443678.png" alt="image-20220820105443678"></p><p>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h2 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h2><p>接下来&#x3D;&#x3D;实例数据部分是对象真正存储的有效信息&#x3D;&#x3D;， 即我们在程序代码里面所定义的各种类型的字段内容， 无论是从父类继承下来的， 还是在子类中定义的字段都必须记录起来。</p><ol><li>这部分的存储顺序会受到虚拟机分配策略参数（<code>-XX:FieldsAllocationStyle</code>参数） 和字段在Java源码中定义顺序的影响。</li><li>HotSpot虚拟机默认的分配顺序为longs&#x2F;doubles、ints、shorts&#x2F;chars、bytes&#x2F;booleans、oops（Ordinary Object Pointers）</li><li>从默认的分配策略中可以看出，相同宽度的字段总被分配到一起存放。</li><li>在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。</li><li>如果HotSpot虚拟机的+XX：CompactFields参数值为true（默认也是true），那么子类中较窄的变量也允许插入父类变量的空隙之间，以节省一点点空间。</li></ol><h2 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h2><p>对象的第三部分是对齐填充，这并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。  </p><h1 id="对象头MarkWord"><a href="#对象头MarkWord" class="headerlink" title="对象头MarkWord"></a>对象头MarkWord</h1><p>markOop.hpp</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820120554301.png" alt="image-20220820120554301"></p><ul><li>32 位虚拟机 Mark Word</li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820120841685.png" alt="image-20220820120841685"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820122618723.png" alt="image-20220820122618723"></p><ul><li>64 位虚拟机 Mark Word</li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820120937056.png" alt="image-20220820120937056"></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820124553995.png" alt="image-20220820124553995"></p><blockquote><p>GC年龄采用4位bit存储，最大为15，例如MaxTenuringThreshold参数默认值就是15</p></blockquote><h1 id="JOL工具的使用"><a href="#JOL工具的使用" class="headerlink" title="JOL工具的使用"></a>JOL工具的使用</h1><p><strong>JOL</strong>（Java 对象布局）是用于分析 JVM 中对象布局方案的微型工具箱。这些工具大量使用不安全、JVMTI 和可维护性代理 （SA） 来解码<em>实际的</em>对象布局、占用空间和引用。这使得 JOL 比依赖于堆转储、规范假设等的其他工具更准确。</p><p><a href="https://openjdk.org/projects/code-tools/jol/">JOL官网</a></p><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-初体验"><a href="#1-初体验" class="headerlink" title="1. 初体验"></a>1. 初体验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">VMTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//VM的细节详细情况</span></span><br><span class="line">    System.out.println(VM.current().details());</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//所有对象分配的字节都是8的整数倍</span></span><br><span class="line">    System.out.println(VM.current().objectAlignment());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820125653630.png" alt="image-20220820125653630"></p><h2 id="2-查看对象内存布局-以下演示都存在指针压缩"><a href="#2-查看对象内存布局-以下演示都存在指针压缩" class="headerlink" title="2. 查看对象内存布局(以下演示都存在指针压缩)"></a>2. 查看对象内存布局(以下演示都存在指针压缩)</h2><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>OFF(OFFSET)</td><td>偏移量，也就是到这个字段位置所占用的byte数</td></tr><tr><td>SZ(SIZE)</td><td>后面类型的字节大小</td></tr><tr><td>TYPE</td><td>是Class中定义的类型</td></tr><tr><td>DESCRIPTION</td><td>DESCRIPTION是类型的描述</td></tr><tr><td>VALUE</td><td>VALUE是TYPE在内存中的值</td></tr></tbody></table><h3 id="2-1-Object对象"><a href="#2-1-Object对象" class="headerlink" title="2.1 Object对象"></a>2.1 Object对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ObjectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//16 bytes</span></span><br><span class="line">    System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820130238645.png" alt="image-20220820130238645"></p><h3 id="2-2-ArrayObject对象"><a href="#2-2-ArrayObject对象" class="headerlink" title="2.2 ArrayObject对象"></a>2.2 ArrayObject对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ArrayObjectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Object[] array = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    System.out.println(ClassLayout.parseInstance(array).toPrintable());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820131031837.png" alt="image-20220820131031837"></p><h3 id="2-3-自定义Class对象-无字段"><a href="#2-3-自定义Class对象-无字段" class="headerlink" title="2.3 自定义Class对象(无字段)"></a>2.3 自定义Class对象(无字段)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ANoFieldTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();<span class="comment">// 16 bytes</span></span><br><span class="line">    System.out.println(ClassLayout.parseInstance(a).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820131248470.png" alt="image-20220820131248470"></p><h3 id="2-4-自定义Class对象-有字段"><a href="#2-4-自定义Class对象-有字段" class="headerlink" title="2.4 自定义Class对象(有字段)"></a>2.4 自定义Class对象(有字段)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AHasFieldTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();<span class="comment">// 16 bytes</span></span><br><span class="line">    System.out.println(ClassLayout.parseInstance(a).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820131406361.png" alt="image-20220820131406361"></p><h3 id="2-5-自定义子类对象"><a href="#2-5-自定义子类对象" class="headerlink" title="2.5 自定义子类对象"></a>2.5 自定义子类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ChildObjectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    System.out.println(ClassLayout.parseInstance(b).toPrintable());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820131758742.png" alt="image-20220820131758742"></p><h2 id="指针压缩"><a href="#指针压缩" class="headerlink" title="指针压缩"></a>指针压缩</h2><p>执行 <code>java -XX:+PrintCommandLineFlags -version</code>,发现指针压缩是默认开启的</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820132340006.png" alt="image-20220820132340006"></p><p>在参数里加 <code>-XX:+UseCompressedClassPointers</code></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820132616323.png" alt="image-20220820132616323"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ObjectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//16 bytes</span></span><br><span class="line">    System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820132701876.png" alt="image-20220820132701876"></p><p>不使用指针压缩：<code>-XX:-UseCompressedClassPointers</code></p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220820132951792.png" alt="image-20220820132951792"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus多数据源</title>
      <link href="/posts/8b33da4c.html"/>
      <url>/posts/8b33da4c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等<br>目前我们就来模拟一个纯粹多库的一个场景，其他场景类似<br>场景说明：<br>我们创建两个库，分别为：mybatis_plus（以前的库不动）与mybatis_plus_1（新建），将mybatis_plus库的product表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p></blockquote><h1 id="1-创建数据库和表"><a href="#1-创建数据库和表" class="headerlink" title="1. 创建数据库和表"></a>1. 创建数据库和表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus_1;</span><br><span class="line"></span><br><span class="line">use mybatis_plus_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product</span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">version <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>添加测试数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><blockquote><p>删除mybatis-plus数据库的product表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mybatis_plus;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> product;</span><br></pre></td></tr></table></figure><h1 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2. 引入依赖"></a>2. 引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-配置多数据源"><a href="#3-配置多数据源" class="headerlink" title="3. 配置多数据源"></a>3. 配置多数据源</h1><blockquote><p>说明：注释掉之前的数据库连接，添加新配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment">#设置默认的数据库或者数据源组，默认值即为master</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#严格匹配数据源，默认false，true未匹配到指定数据源是抛异常，false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_2?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h1 id="4-创建Service"><a href="#4-创建Service" class="headerlink" title="4. 创建Service"></a>4. 创建Service</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DS(&quot;master&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper,Product&gt; <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisplusDatasourceApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(userService.getById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(productService.getById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：<br>1、都能顺利获取对象，则测试成功<br>2、如果我们实现读写分离，将写操作方法加上主库数据源，读操作方法加上从库数据源，自动切换，是不是就能实现读写分离？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus代码生成器</title>
      <link href="/posts/788364bd.html"/>
      <url>/posts/788364bd.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig">代码生成器配置</a></p><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-快速生成"><a href="#2-快速生成" class="headerlink" title="2. 快速生成"></a>2. 快速生成</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpGeneratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FastAutoGenerator</span><br><span class="line">                .create(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;wq&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;E:\\idea\\FrameWork\\MyBatis-Plus\\mp-01-qiuckstart\\src\\main\\java\\com\\wqing\\mp\\genetor&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.wqing.mp.genetor&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="string">&quot;system&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;E:\\idea\\FrameWork\\MyBatis-Plus\\mp-01-qiuckstart\\src\\main\\resources\\mapper\\generator&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;t_user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus通用枚举</title>
      <link href="/posts/82f1946b.html"/>
      <url>/posts/82f1946b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><h1 id="1-数据库表添加字段sex"><a href="#1-数据库表添加字段sex" class="headerlink" title="1. 数据库表添加字段sex"></a>1. 数据库表添加字段sex</h1><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646728223466-fa232c49-12d6-4993-abfd-8873fd3801d3.png" alt="img"></p><h1 id="2-创建通用枚举类型"><a href="#2-创建通用枚举类型" class="headerlink" title="2. 创建通用枚举类型"></a>2. 创建通用枚举类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-配置扫描通用枚举"><a href="#3-配置扫描通用枚举" class="headerlink" title="3. 配置扫描通用枚举"></a>3. 配置扫描通用枚举</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">org.apache.ibatis.type.EnumOrdinalTypeHandler</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.wqing.mp.entity</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.wqing.mp.enums</span></span><br></pre></td></tr></table></figure><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">33</span>);</span><br><span class="line">    user.setSex(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646729792258-2c3d5b85-38cf-4b36-961f-ed84fa23ee2f.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus插件</title>
      <link href="/posts/8380093e.html"/>
      <url>/posts/8380093e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1. 分页插件"></a>1. 分页插件</h1><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><h2 id="1-1-添加配置类"><a href="#1-1-添加配置类" class="headerlink" title="1.1 添加配置类"></a>1.1 添加配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//可以将主类中的注解移到此处</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wqing.mp.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-测试"><a href="#1-2-测试" class="headerlink" title="1.2 测试"></a>1.2 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+ page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span> + page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span> + page.hasNext());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span> + page.hasPrevious());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646724735253-e4b2b367-f90d-4630-959b-2fb16e230609.png" alt="img"></p><h1 id="2-Xml自定义分页"><a href="#2-Xml自定义分页" class="headerlink" title="2. Xml自定义分页"></a>2. Xml自定义分页</h1><h2 id="2-1-在UserMapper中定义接口方法"><a href="#2-1-在UserMapper中定义接口方法" class="headerlink" title="2.1 在UserMapper中定义接口方法"></a>2.1 在UserMapper中定义接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据年龄查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> age 年龄</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-2-在UserMapper-xml中编写SQL"><a href="#2-2-在UserMapper-xml中编写SQL" class="headerlink" title="2.2 在UserMapper.xml中编写SQL"></a>2.2 在UserMapper.xml中编写SQL</h2><blockquote><p>开启别名：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.wqing.mp.entity</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,age,email from t_user where age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    userMapper.selectPageVo(page,<span class="number">20</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+ page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span> + page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span> + page.hasNext());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span> + page.hasPrevious());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646725937340-c331ecd8-5c3f-49ed-866c-289397ff433a.png" alt="img"></p><h1 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3. 乐观锁"></a>3. 乐观锁</h1><h2 id="3-1-场景"><a href="#3-1-场景" class="headerlink" title="3.1 场景"></a>3.1 场景</h2><blockquote><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。<br>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。<br>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</p></blockquote><h2 id="3-2-乐观锁与悲观锁"><a href="#3-2-乐观锁与悲观锁" class="headerlink" title="3.2 乐观锁与悲观锁"></a>3.2 乐观锁与悲观锁</h2><blockquote><p>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。<br>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元</p></blockquote><h2 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h2><h3 id="3-3-1-数据库中增加商品表"><a href="#3-3-1-数据库中增加商品表" class="headerlink" title="3.3.1 数据库中增加商品表"></a>3.3.1 数据库中增加商品表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product</span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-3-2-添加数据"><a href="#3-3-2-添加数据" class="headerlink" title="3.3.2 添加数据"></a>3.3.2 添加数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="3-3-3-创建实体"><a href="#3-3-3-创建实体" class="headerlink" title="3.3.3 创建实体"></a>3.3.3 创建实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-创建ProductMapper"><a href="#3-3-4-创建ProductMapper" class="headerlink" title="3.3.4 创建ProductMapper"></a>3.3.4 创建ProductMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5-测试"><a href="#3-3-5-测试" class="headerlink" title="3.3.5 测试"></a>3.3.5 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//小李查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span> + productLi.getPrice());</span><br><span class="line">    <span class="comment">//小王查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span> + productWang.getPrice());</span><br><span class="line">    <span class="comment">//小李将商品价格加 50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">    <span class="comment">//小王将商品价格键减 30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line">    <span class="comment">//老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646727194415-4c56eaab-3191-40bb-9922-e7371d29c8d3.png" alt="img"></p><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646727211327-6cab1e1e-c99b-4347-94da-500c9740ad92.png" alt="img"></p><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646727245917-5a3f8a8b-2792-42a0-9dd4-75d628d101c8.png" alt="img"></p><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646727259144-a669c94e-9dc8-42ae-8d56-b6e18964fcee.png" alt="img"></p><h2 id="3-4-乐观锁实现流程"><a href="#3-4-乐观锁实现流程" class="headerlink" title="3.4 乐观锁实现流程"></a>3.4 乐观锁实现流程</h2><blockquote><p>数据库中添加version字段<br>取出记录时，获取当前version<br><code>SELECT id,</code>name<code>,price,</code>version<code>FROM product WHERE id=1</code><br>更新时，version + 1，如果where语句中的version版本不对，则更新失败<br><code>UPDATE product SET price=price+50,</code>version<code>=</code>version<code>+ 1 WHERE id=1 AND</code>version<code>=1</code></p></blockquote><h2 id="3-5-MyBatis-Plus实现乐观锁"><a href="#3-5-MyBatis-Plus实现乐观锁" class="headerlink" title="3.5 MyBatis-Plus实现乐观锁"></a>3.5 MyBatis-Plus实现乐观锁</h2><h3 id="3-5-1-修改实体类"><a href="#3-5-1-修改实体类" class="headerlink" title="3.5.1 修改实体类"></a>3.5.1 修改实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="comment">//标识乐观锁版本号字段</span></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-添加乐观锁插件配置"><a href="#3-5-2-添加乐观锁插件配置" class="headerlink" title="3.5.2 添加乐观锁插件配置"></a>3.5.2 添加乐观锁插件配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//可以将主类中的注解移到此处</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wqing.mp.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-测试修改冲突"><a href="#3-5-3-测试修改冲突" class="headerlink" title="3.5.3 测试修改冲突"></a>3.5.3 测试修改冲突</h3><blockquote><p>小李查询商品信息：<br>SELECT id,name,price,version FROM t_product WHERE id&#x3D;?<br>小王查询商品信息：<br>SELECT id,name,price,version FROM t_product WHERE id&#x3D;?<br>小李修改商品价格，自动将version+1<br>UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?<br>Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)<br>小王修改商品价格，此时version已更新，条件不成立，修改失败<br>UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?<br>Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)<br>最终，小王修改失败，查询价格：150<br>SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p></blockquote><h3 id="3-5-4-优化流程"><a href="#3-5-4-优化流程" class="headerlink" title="3.5.4 优化流程"></a>3.5.4 优化流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//小李查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span> + productLi.getPrice());</span><br><span class="line">    <span class="comment">//小王查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span> + productWang.getPrice());</span><br><span class="line">    <span class="comment">//小李将商品价格加 50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">    <span class="comment">//小王将商品价格键减 30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//操作失败，重试</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productNew</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productNew.setPrice(productNew.getPrice() - <span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(productNew);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus条件构造器和常用接口</title>
      <link href="/posts/c60a7d1f.html"/>
      <url>/posts/c60a7d1f.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/pages/10c804/#abstractwrapper">条件构造器</a></p><h1 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1. Wrapper介绍"></a>1. Wrapper介绍</h1><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646715583615-c63955ad-a91c-4121-b562-e5da7342e51b.png" alt="img"></p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类</li><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper ： 查询条件封装</li><li>UpdateWrapper ： Update 条件封装</li><li>AbstractLambdaWrapper ： 使用Lambda 语法<ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646715678232-3d36ec10-8e0d-433c-adef-aa256b71ea72.png" alt="img"></p><h1 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2. QueryWrapper"></a>2. QueryWrapper</h1><h2 id="2-1-组装查询条件"><a href="#2-1-组装查询条件" class="headerlink" title="2.1 组装查询条件"></a>2.1 组装查询条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询用户名包含 a ，年龄在20到30之间，邮箱信息不为null</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SELECT id AS uid,username AS name,age,email,is_deleted<br>FROM t_user<br>WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646716363755-f8e25cc3-3687-431a-9f5a-e795499c465d.png" alt="img"></p><h2 id="2-2-组装排序条件"><a href="#2-2-组装排序条件" class="headerlink" title="2.2 组装排序条件"></a>2.2 组装排序条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询用户信息，按年龄的降序排序，若年龄相同，则按照id升序排序</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">            .orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646716682706-b5c8bbc6-7b95-445d-af71-0010497d13db.png" alt="img"></p><h2 id="2-3-组装删除条件"><a href="#2-3-组装删除条件" class="headerlink" title="2.3 组装删除条件"></a>2.3 组装删除条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的数量： &quot;</span> + res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646716889923-f72259bf-c403-4e8e-a4b7-9d6517394b9b.png" alt="img"></p><h2 id="2-4-组装更新条件-条件的优先级"><a href="#2-4-组装更新条件-条件的优先级" class="headerlink" title="2.4 组装更新条件(条件的优先级)"></a>2.4 组装更新条件(条件的优先级)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .or()</span><br><span class="line">            .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@163.com&quot;</span>);</span><br><span class="line">    userMapper.update(user,queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646718529670-fd8d7a43-1f21-4e3d-81d1-84e1a8aabd91.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(wrapper -&gt; wrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test@163.com&quot;</span>);</span><br><span class="line">    userMapper.update(user,queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646719197446-fa29dc13-8aaa-4b94-bcf0-69dd58336fc2.png" alt="img"></p><h2 id="2-5-组装select子句"><a href="#2-5-组装select子句" class="headerlink" title="2.5 组装select子句"></a>2.5 组装select子句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    userMapper.selectMaps(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646719463466-8d56d359-cd83-4645-9ed1-6a7910d79e69.png" alt="img"></p><h2 id="2-6-实现子查询"><a href="#2-6-实现子查询" class="headerlink" title="2.6 实现子查询"></a>2.6 实现子查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询id小于100的用户信息</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from t_user where id &lt;= 100&quot;</span>);</span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646720196395-16c6cc6a-3f5e-4817-b515-fe8e76b3de43.png" alt="img"></p><h1 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3. UpdateWrapper"></a>3. UpdateWrapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(wrapper -&gt; wrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>))</span><br><span class="line">            .set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小白&quot;</span>)</span><br><span class="line">            .set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@example.com&quot;</span>);</span><br><span class="line">    userMapper.update(<span class="literal">null</span>,updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646721673598-aedd585c-d0aa-418c-88bf-f188efc9b5d6.png" alt="img"></p><h1 id="4-condition"><a href="#4-condition" class="headerlink" title="4. condition"></a>4. condition</h1><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><h2 id="4-1-思路一"><a href="#4-1-思路一" class="headerlink" title="4.1 思路一"></a>4.1 思路一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(username))&#123;</span><br><span class="line">        <span class="comment">//isNotBlank:判断某个字符串是否不为空字符串，不为Null,不为空字符串</span></span><br><span class="line">        queryWrapper.like(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ageBegin != <span class="literal">null</span>) &#123;</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;age&quot;</span>,ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ageEnd != <span class="literal">null</span>) &#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646722181730-0b90f712-1bc4-4ecf-8b83-fbed705d93e4.png" alt="img"></p><h2 id="4-2-思路二"><a href="#4-2-思路二" class="headerlink" title="4.2 思路二"></a>4.2 思路二</h2><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username),<span class="string">&quot;username&quot;</span>,username)</span><br><span class="line">            .ge(ageBegin!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageBegin)</span><br><span class="line">            .le(ageEnd!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646722792150-8a80a689-cab6-4c6b-928d-00f4613747d9.png" alt="img"></p><h1 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5. LambdaQueryWrapper"></a>5. LambdaQueryWrapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">            .ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">            .le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">    userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646723150980-c21bfd52-e28b-45e2-9750-fab3700c9995.png" alt="img"></p><h1 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6. LambdaUpdateWrapper"></a>6. LambdaUpdateWrapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//将用户名中包含有e并且（年龄大于20或邮箱为null）的用户信息修改</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getName, <span class="string">&quot;e&quot;</span>)</span><br><span class="line">            .and(wrapper -&gt; wrapper.gt(User::getAge, <span class="number">20</span>)</span><br><span class="line">                    .or()</span><br><span class="line">                    .isNull(User::getEmail))</span><br><span class="line">            .set(User::getName, <span class="string">&quot;小白&quot;</span>)</span><br><span class="line">            .set(User::getEmail, <span class="string">&quot;abc@example.com&quot;</span>);</span><br><span class="line">    userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646723356583-df4e6779-f2c3-4572-a833-0446767ef40f.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus常用注解</title>
      <link href="/posts/9acfe0e2.html"/>
      <url>/posts/9acfe0e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1. @TableName"></a>1. @TableName</h1><blockquote><p><strong>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在<br>Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表</strong><br><strong>由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决<br>定，且默认操作的表名和实体类型的类名一致</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableName &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">schema</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">keepGlobalPrefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">resultMap</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">autoResultMap</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String[] excludeProperty() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h2><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong><br>我们将表user更名为t_user，测试查询功能<br>程序抛出异常，<code>Table &#39;mybatis_plus.user&#39; doesn&#39;t exist</code>，因为现在的表名为t_user，而默认操作的表名和实体类型的类名一致，即user表<br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646660475976-c8ffc6eb-4634-4754-8e68-92aeb479d20d.png" alt="img"></p><h2 id="1-2-通过-TableName-解决"><a href="#1-2-通过-TableName-解决" class="headerlink" title="1.2 通过 @TableName 解决"></a>1.2 通过 @TableName 解决</h2><blockquote><p><strong>在实体类类型上添加@TableName(“t_user”)，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-通过全局配置解决问题"><a href="#1-3-通过全局配置解决问题" class="headerlink" title="1.3 通过全局配置解决问题"></a>1.3 通过全局配置解决问题</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h1 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2. @TableId"></a>2. @TableId</h1><blockquote><p>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableId &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    IdType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> IdType.NONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h2><p>Q：若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？<br>A：我们实体类中的属性id改为uid，将表中的字段id也改为uid，测试添加功能程序抛出异常，<code>Field &#39;uid&#39; doesn&#39;t have a default value</code>，说明MyBatis-Plus没有将uid作为主键赋值<br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646661289045-4b842c7c-457f-41f1-8ac5-ff4456b69e52.png" alt="img"></p><h2 id="2-2-通过-TableId解决问题"><a href="#2-2-通过-TableId解决问题" class="headerlink" title="2.2 通过@TableId解决问题"></a>2.2 通过@TableId解决问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-TableId的Value属性"><a href="#2-3-TableId的Value属性" class="headerlink" title="2.3 TableId的Value属性"></a>2.3 TableId的Value属性</h2><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常<code>Unknown column &#39;id&#39; in &#39;field list&#39;</code>，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid。此时需要通过@TableId注解的value属性，指定表中的主键字段，@TableId(“uid”)@TableId(value&#x3D;”uid”)</p></blockquote><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646661607538-0e086f42-80ee-41b0-bc39-99123392746b.png" alt="img"></p><h2 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4 @TableId的type属性"></a>2.4 @TableId的type属性</h2><blockquote><p><strong>type属性用来定义主键策略</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库 ID 自增</td></tr><tr><td>NONE</td><td>无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td>INPUT</td><td>insert 前自行 set 主键值</td></tr><tr><td>ASSIGN_ID</td><td>分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td></tr><tr><td>ASSIGN_UUID</td><td>分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td></tr><tr><td><del>ID_WORKER</del></td><td>分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td></tr><tr><td><del>UUID</del></td><td>32 位 UUID 字符串(please use ASSIGN_UUID)</td></tr><tr><td><del>ID_WORKER_STR</del></td><td>分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td></tr></tbody></table><p><strong>配置全局主键策略:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 配置MyBatis-Plus的主键策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h2 id="2-5-雪花算法"><a href="#2-5-雪花算法" class="headerlink" title="2.5 雪花算法"></a>2.5 雪花算法</h2><h3 id="2-5-1-背景"><a href="#2-5-1-背景" class="headerlink" title="2.5.1 背景"></a>2.5.1 背景</h3><p>需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。数据库的扩展方式主要包括：<strong>业务分库、主从复制，数据库分表</strong>。</p><h3 id="2-5-2-数据库分表"><a href="#2-5-2-数据库分表" class="headerlink" title="2.5.2 数据库分表"></a>2.5.2 数据库分表</h3><p>将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。<br>单表数据拆分有两种方式：<strong>垂直分表和水平分表</strong>。示意图如下：<br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646713700551-8ae18719-983a-451f-aeb7-318c59184a8f.png" alt="img"></p><h3 id="2-5-3-垂直分表"><a href="#2-5-3-垂直分表" class="headerlink" title="2.5.3 垂直分表"></a>2.5.3 垂直分表</h3><p>垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。<br>例如，前面示意图中的 nickname 和 description 字段，假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><h3 id="2-5-4-水平分表"><a href="#2-5-4-水平分表" class="headerlink" title="2.5.4 水平分表"></a>2.5.4 水平分表</h3><p>水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以<br>作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000<br>万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。<br>但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性<br>能瓶颈或者隐患。<br>水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处理</p><blockquote><p><strong>主键自增</strong></p></blockquote><p>①以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1中，1000000 ~ 1999999 放到表2中，以此类推。<br>②复杂点：分段大小的选取。分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。<br>③优点：可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。<br>④缺点：分布不均匀。假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1 条，而另外一个分段实际存储的数据量有 1000 万条。</p><blockquote><p><strong>取模</strong></p></blockquote><p>①同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号为 6 的子表中。<br>②复杂点：初始表数量的确定。表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。<br>③优点：表分布比较均匀。<br>④缺点：扩充新的表很麻烦，所有数据都要重分布。</p><blockquote><p><strong>雪花算法</strong></p></blockquote><p>雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。<br>①核心思想：<br>长度共64bit（一个long型）。<br>首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0。<br>41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。<br>10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。<br>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。<br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646714106464-af839696-0bf2-4a8e-a03c-422f5bb25a02.png" alt="img"></p><p>②优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高</p><h1 id="3-TableField"><a href="#3-TableField" class="headerlink" title="3 @TableField"></a>3 @TableField</h1><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致<br><strong>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</strong></p></blockquote><h2 id="3-1-驼峰命名"><a href="#3-1-驼峰命名" class="headerlink" title="3.1 驼峰命名"></a>3.1 驼峰命名</h2><blockquote><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格<br>例如实体类属性<code>userName</code>，表中字段<code>user_name</code><br>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格相当于在MyBatis中配置</p></blockquote><h2 id="3-2-属性名与字段名不一致"><a href="#3-2-属性名与字段名不一致" class="headerlink" title="3.2 属性名与字段名不一致"></a>3.2 属性名与字段名不一致</h2><blockquote><p>若实体类中的属性和表中的字段不满足情况1<br>例如实体类属性name，表中字段username<br>此时需要在实体类属性上使用@TableField(“username”)设置属性所对应的字段名</p></blockquote><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646714493966-2b73e425-d7b7-4e03-b9c4-1a07c6372973.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4. @TableLogic"></a>4. @TableLogic</h1><h2 id="4-1-逻辑删除"><a href="#4-1-逻辑删除" class="headerlink" title="4.1 逻辑删除"></a>4.1 逻辑删除</h2><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li><li>使用场景：<strong>可以进行数据恢复</strong></li></ul><h2 id="4-2-实现逻辑删除"><a href="#4-2-实现逻辑删除" class="headerlink" title="4.2 实现逻辑删除"></a>4.2 实现逻辑删除</h2><ol><li>数据库中创建逻辑删除状态列，设置默认值为0</li></ol><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646714844970-b02d30f9-1993-4074-9265-7d25ca25987b.png" alt="img"></p><ol start="2"><li>实体类中添加逻辑删除属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的记录数： &quot;</span> + rows);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.selectList(<span class="literal">null</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646715036686-1e58036e-de4c-48b7-89b0-af54a0a7ef4d.png" alt="img"></p><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646715195880-14c18ec1-9db1-4c8a-adf7-164bf933ca4e.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus基本CRUD</title>
      <link href="/posts/ebb52b50.html"/>
      <url>/posts/ebb52b50.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-BaseMapper"><a href="#1-BaseMapper" class="headerlink" title="1. BaseMapper"></a>1. BaseMapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.core.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Constants;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.4.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID或实体 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表或实体列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;?&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        List&lt;T&gt; ts = <span class="built_in">this</span>.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，判断是否存在记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.selectCount(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> != count &amp;&amp; count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; P <span class="title function_">selectPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; P <span class="title function_">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-插入"><a href="#2-插入" class="headerlink" title="2. 插入"></a>2. 插入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangsan@mp.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;影响的行数: &quot;</span> + rows);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646557477015-8b09aa87-cedd-4c97-b236-fbfd3769a658.png" alt="img"></p><blockquote><p>最终执行的结果，所获取的id为1475754982694199298<br>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</p></blockquote><h1 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h1><h2 id="3-1-根据ID删除"><a href="#3-1-根据ID删除" class="headerlink" title="3.1 根据ID删除"></a>3.1 根据ID删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1500396297692135425L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的记录数： &quot;</span> + rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646557823725-00fc2a28-e830-4471-89cd-e19174cdd080.png" alt="img"></p><h2 id="3-2-通过ID批量删除记录"><a href="#3-2-通过ID批量删除记录" class="headerlink" title="3.2 通过ID批量删除记录"></a>3.2 通过ID批量删除记录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的记录数： &quot;</span> + rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646558295752-97e09a6b-b831-4930-aacd-ed296d836bc5.png" alt="img"></p><h2 id="3-3-通过Map删除记录"><a href="#3-3-通过Map删除记录" class="headerlink" title="3.3 通过Map删除记录"></a>3.3 通过Map删除记录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的记录数： &quot;</span> + rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646558148784-7da9ca75-6738-453c-a309-0385c271ea3f.png" alt="img"></p><h1 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新"></a>4. 更新</h1><h2 id="4-1-根据ID更新"><a href="#4-1-根据ID更新" class="headerlink" title="4.1 根据ID更新"></a>4.1 根据ID更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">4L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;lisi@163.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的记录数： &quot;</span> + rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646562661988-56eceeb1-5f57-4994-9420-fd8e3979693b.png" alt="img"></p><h1 id="5-查询"><a href="#5-查询" class="headerlink" title="5. 查询"></a>5. 查询</h1><h2 id="5-1-根据ID查询"><a href="#5-1-根据ID查询" class="headerlink" title="5.1 根据ID查询"></a>5.1 根据ID查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646563136247-b715f3ba-7d4f-4dcc-bf91-7fbd79551934.png" alt="img"></p><h2 id="5-2-根据多个id查询"><a href="#5-2-根据多个id查询" class="headerlink" title="5.2 根据多个id查询"></a>5.2 根据多个id查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; longs = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">    userMapper.selectBatchIds(longs).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646651427599-39a62256-b612-4b81-99bd-a6c02b123261.png" alt="img"></p><h2 id="5-3-通过map条件查询"><a href="#5-3-通过map条件查询" class="headerlink" title="5.3 通过map条件查询"></a>5.3 通过map条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    userMapper.selectByMap(map).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646651626125-aa67d0d9-54eb-4a11-9b55-dbbc6b564d8f.png" alt="img"></p><h2 id="5-4-查询所有数据"><a href="#5-4-查询所有数据" class="headerlink" title="5.4 查询所有数据"></a>5.4 查询所有数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.selectList(<span class="literal">null</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646651793158-796373eb-8932-48c3-a11a-5b6fec5ec0c2.png" alt="img"></p><blockquote><p>通过观察BaseMapper中的方法，大多方法中都有Wrapper类型的形参，此为条件构造器，可针对于SQL语句设置不同的条件，若没有条件，则可以为该形参赋值null，即查询（删除&#x2F;修改）所有数据 。</p></blockquote><hr><h1 id="6-通用Service"><a href="#6-通用Service" class="headerlink" title="6. 通用Service"></a>6. 通用Service</h1><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装IService (opens new window)接口，进一步封装 CRUD 采用 <code>get 查询单行</code>、 <code>remove 删除</code>、 <code>list 查询集合</code>、 <code>page 分页</code> 前缀命名方式区分 Mapper 层避免混淆</li><li>泛型 T 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类</li><li>对象 Wrapper 为 条件构造器</li></ul></blockquote><h2 id="6-1-Iservice"><a href="#6-1-Iservice" class="headerlink" title="6.1 Iservice"></a>6.1 Iservice</h2><p><strong>MyBatis-Plus中有一个接口 IService和其实现类 ServiceImpl，封装了常见的业务层逻辑详情查看源码IService和ServiceImpl</strong></p><h2 id="6-2-创建Service接口和实现类"><a href="#6-2-创建Service接口和实现类" class="headerlink" title="6.2 创建Service接口和实现类"></a>6.2 创建Service接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* UserService继承IService模板提供的基础功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ServiceImpl实现了IService，提供了IService中基础功能的实现</span></span><br><span class="line"><span class="comment">* 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-测试查询记录数"><a href="#6-3-测试查询记录数" class="headerlink" title="6.3 测试查询记录数"></a>6.3 测试查询记录数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数： &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646658113094-0796a929-25dc-490e-8b28-2d370544e867.png" alt="img"></p><h2 id="6-4-测试批量添加"><a href="#6-4-测试批量添加" class="headerlink" title="6.4 测试批量添加"></a>6.4 测试批量添加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span> + i);</span><br><span class="line">        user.setAge(<span class="number">20</span>+i);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test&quot;</span> + i + <span class="string">&quot;@163.com&quot;</span>);</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(users);</span><br><span class="line">    System.out.println(<span class="string">&quot;是否添加成功&quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646659316228-2bf81fd0-4394-4c86-94ef-6c13901b7aca.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus入门案例</title>
      <link href="/posts/f091a38a.html"/>
      <url>/posts/f091a38a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h1><ul><li>IDE：IDEA2022.2.2</li><li>JDK：JDK 8+</li><li>构建工具：Maven 3.8.4</li><li>MySQL版本：8.0.13</li><li>Spring Boot：2.6.4</li><li>MyBatis-Plus：3.5.1</li></ul><hr><h1 id="2-创建数据库和表"><a href="#2-创建数据库和表" class="headerlink" title="2. 创建数据库和表"></a>2. 创建数据库和表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="3-创建-Spring-Boot-工程"><a href="#3-创建-Spring-Boot-工程" class="headerlink" title="3. 创建 Spring Boot 工程"></a>3. 创建 Spring Boot 工程</h1><h2 id="3-1-初始化工程"><a href="#3-1-初始化工程" class="headerlink" title="3.1 初始化工程"></a>3.1 初始化工程</h2><p>使用 Spring Initializr 快速初始化一个 Spring Boot 工程<br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646554282582-5943c6a2-f21a-4188-81a7-eb9eb4b868e1.png" alt="img"><br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646554395807-259e1fdd-d89c-4d9e-8333-662ee18e16c2.png" alt="img"></p><h2 id="3-2-引入依赖"><a href="#3-2-引入依赖" class="headerlink" title="3.2 引入依赖"></a>3.2 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-编写代码"><a href="#4-编写代码" class="headerlink" title="4. 编写代码"></a>4. 编写代码</h1><h2 id="4-1-配置-application-yaml"><a href="#4-1-配置-application-yaml" class="headerlink" title="4.1 配置 application.yaml"></a>4.1 配置 application.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><blockquote><p>1、驱动类driver-class-name<br>spring boot 2.0（内置jdbc5驱动），驱动类使用： <code>driver-class-name: com.mysql.jdbc.Driver</code><br>spring boot 2.1及以上（内置jdbc8驱动），驱动类使用：<code>driver-class-name: com.mysql.cj.jdbc.Driver</code><br>否则运行测试用例的时候会有 WARN 信息<br>2、连接地址url<br>MySQL5.7版本的url：<br><code>jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</code><br>MySQL8.0版本的url：<br><code>jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</code><br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or<br>represents more</p></blockquote><h2 id="4-2-启动类"><a href="#4-2-启动类" class="headerlink" title="4.2 启动类"></a>4.2 启动类</h2><blockquote><p>在Spring Boot启动类中添加@MapperScan注解，扫描mapper包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wqing.mp.mapper&quot;)</span> <span class="comment">//扫描 mapper 接口所在的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyBatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-编写实体类"><a href="#4-3-编写实体类" class="headerlink" title="4.3 编写实体类"></a>4.3 编写实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.mp.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用Lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-添加mapper"><a href="#4-4-添加mapper" class="headerlink" title="4.4 添加mapper"></a>4.4 添加mapper</h2><blockquote><p>BaseMapper是MyBatis-Plus提供的模板mapper，其中包含了基本的CRUD方法，泛型为操作的实体类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.wqing.mp.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span>  <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqing.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.selectList(<span class="literal">null</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果:</strong><br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646556364898-136583fa-78c1-4210-a7ff-da79f4c95b1a.png" alt="img"></p><blockquote><p>IDEA在 userMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确<br>的执行。<br>为了避免报错，可以在mapper接口上添加 @Repository 注解</p></blockquote><h2 id="4-6-添加日志"><a href="#4-6-添加日志" class="headerlink" title="4.6 添加日志"></a>4.6 添加日志</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646556710600-d2cbd3e8-ccf6-4dac-bd81-db6570cf5355.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus 简介</title>
      <link href="/posts/203b2d12.html"/>
      <url>/posts/203b2d12.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>愿景<br>我们的愿景是成为 MyBatis 最好的搭档，就像魂斗罗中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646552941554-c6e0ab54-b71c-4b1e-872c-c31e4f9802c2.png" alt="img"></p><hr><h1 id="2-特性"><a href="#2-特性" class="headerlink" title="2. 特性"></a>2. 特性</h1><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑  </li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作  </li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求  </li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><hr><h1 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3. 支持数据库"></a>3. 支持数据库</h1><blockquote><p>任何能使用MyBatis进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><hr><h1 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4. 框架结构"></a>4. 框架结构</h1><p><img src="https://typora-1309755336.cos.ap-nanjing.myqcloud.com/images/1646553258313-cd794a16-9a15-4131-aace-d35008ca5fe3.png" alt="img"></p><hr><h1 id="5-代码及文档地址"><a href="#5-代码及文档地址" class="headerlink" title="5. 代码及文档地址"></a>5. 代码及文档地址</h1><p>官方地址: <a href="http://mp.baomidou.com/">http://mp.baomidou.com</a><br>代码发布地址:</p><ol><li>Github: <a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a></li><li>Gitee: <a href="https://gitee.com/baomidou/mybatis-plus">https://gitee.com/baomidou/mybatis-plus</a><br>文档发布地址: <a href="https://baomidou.com/pages/24112f">https://baomidou.com/pages/24112f</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> MyBatis Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从复制</title>
      <link href="/posts/b7e51ad7.html"/>
      <url>/posts/b7e51ad7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="1-主从复制简介"><a href="#1-主从复制简介" class="headerlink" title="1. 主从复制简介"></a>1. 主从复制简介</h2><p><strong>互联网“三高”架构</strong></p><ul><li>高并发</li><li>高性能</li><li>高可用</li></ul><h3 id="1-1-单机-Redis-是否高可用"><a href="#1-1-单机-Redis-是否高可用" class="headerlink" title="1.1 单机 Redis 是否高可用"></a>1.1 单机 Redis 是否高可用</h3><p>单机redis的风险与问题</p><p>问题1.机器故障</p><ul><li>现象： 硬盘故障、系统崩溃</li><li>本质： 数据丢失，很可能对业务造成灾难性打击</li><li>结论： 基本上会放弃使用redis.</li></ul><p>问题2.容量瓶颈  </p><ul><li><p>现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存</p></li><li><p>本质：穷，硬件条件跟不上</p></li><li><p>结论：放弃使用redis</p></li></ul><p>结论：</p><p>为了避免单点Redis服务器故障，准备多台服务器，互相连通。 将数据复制多个副本保存在不同的服务器上， <strong>连接在一起</strong>， 并保证数据是<strong>同步</strong>的。 即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用， 同时实现数据<strong>冗余备份</strong>。  </p><h3 id="1-2-主从复制"><a href="#1-2-主从复制" class="headerlink" title="1.2 主从复制"></a>1.2 主从复制</h3><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><p>主从复制即将master中的数据即时、有效的复制到slave中</p><p>特征：一个master可以拥有多个slave，一个slave只对应一个master</p><p>职责：</p><ul><li>master<ul><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave</li><li>读数据（可忽略）</li></ul></li><li>slave<ul><li>读数据</li><li>写数据（禁止）</li></ul></li></ul><p>需要解决的问题：<strong>数据同步</strong><br>核心工作：<strong>master的数据复制到slave中</strong>  </p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903162452359.png" alt="image-20220903162452359"></p><h3 id="1-3-主从复制的作用"><a href="#1-3-主从复制的作用" class="headerlink" title="1.3 主从复制的作用"></a>1.3 主从复制的作用</h3><ul><li>读写分离： master写、 slave读，提高服务器的读写负载能力</li><li>负载均衡： 基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石： 基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h2 id="2-主从复制的搭建"><a href="#2-主从复制的搭建" class="headerlink" title="2. 主从复制的搭建"></a>2. 主从复制的搭建</h2><blockquote><p>环境：</p><p>CentOS：7.9</p><p>Redis 6.2.6</p></blockquote><h3 id="2-1-配置文件的准备"><a href="#2-1-配置文件的准备" class="headerlink" title="2.1 配置文件的准备"></a>2.1 配置文件的准备</h3><p><strong>步骤一：Master配置文件</strong></p><p><code>redis-6381.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">port 6381</span><br><span class="line"><span class="comment">#daemonize no</span></span><br><span class="line"><span class="comment">#logfile &quot;6381.log&quot;</span></span><br><span class="line"><span class="built_in">dir</span> /redis/data</span><br><span class="line">dbfilename <span class="string">&quot;dump-6381&quot;</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly-6381&quot;</span></span><br></pre></td></tr></table></figure><p>步骤二：Slave1、Slave2的配置文件</p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&quot;s/6381/6382/g&quot;</span> redis-6381.conf &gt; redis-6382.conf</span><br><span class="line">sed <span class="string">&quot;s/6381/6383/g&quot;</span> redis-6381.conf &gt; redis-6383.conf</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903163550548.png" alt="image-20220903163550548"></p><h3 id="2-2-开始搭建"><a href="#2-2-开始搭建" class="headerlink" title="2.2 开始搭建"></a>2.2 开始搭建</h3><p>步骤一：Master的搭建</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903164427961.png" alt="image-20220903164427961"></p><p>步骤二：启动 Slave1(6382)</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903164655552.png" alt="image-20220903164655552"></p><p>步骤三：测试一</p><ol><li>在6381，设置一个值，并在6382 尝试获取</li></ol><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903165126308.png" alt="image-20220903165126308"></p><ol start="2"><li>执行 <code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 127.0.0.1 6381</span><br></pre></td></tr></table></figure><ol start="3"><li>再次获取<br><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903165419075.png" alt="image-20220903165419075"></li></ol><p>步骤四：启动Slave2(6383)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903170313321.png" alt="image-20220903170313321"></p><p>连接客户端</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903170405897.png" alt="image-20220903170405897"></p><p>步骤五：查看data目录</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903170532195.png" alt="image-20220903170532195"></p><blockquote><p>我们并未开启rdb持久化，但是还是生成了rdb文件。</p><p>结论:主从复制过程是通过rdb文件来实现的</p></blockquote><h3 id="2-3-主从连接"><a href="#2-3-主从连接" class="headerlink" title="2.3 主从连接"></a>2.3 主从连接</h3><p>主从连接的方式（ slave连接master）</p><ul><li><p>方式一：客户端发送命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">REPLICAOF host port</span><br></pre></td></tr></table></figure></li><li><p>方式二：启动服务器参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式三：服务器配置，在配置文件中配置(主流)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">port 6382</span><br><span class="line">#daemonize no</span><br><span class="line">#logfile &quot;6382.log&quot;</span><br><span class="line">dir /redis/data</span><br><span class="line">dbfilename &quot;dump-6382&quot;</span><br><span class="line">appendfilename &quot;appendonly-6382&quot;</span><br><span class="line">slaveof 127.0.0.1 6381</span><br></pre></td></tr></table></figure></li></ul><p>master系统信息</p><p>执行 info 命令</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903171621726.png" alt="image-20220903171621726"></p><p>slave系统信息</p><p>执行 info 命令</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903171747953.png" alt="image-20220903171747953"></p><h3 id="2-4-主从断开连接"><a href="#2-4-主从断开连接" class="headerlink" title="2.4 主从断开连接"></a>2.4 主从断开连接</h3><p>客户端发送命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>slave断开连接后，不会删除已有数据，只是不再接受master发送的数据  </p></blockquote><h3 id="2-5-授权访问"><a href="#2-5-授权访问" class="headerlink" title="2.5 授权访问"></a>2.5 授权访问</h3><p>Master设置密码</p><ul><li><p>master客户端发送命令设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass &lt;password&gt;</span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure></li><li><p>master配置文件设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass &lt;password&gt;</span><br></pre></td></tr></table></figure></li></ul><p>Slave设置密码</p><ul><li><p>slave客户端发送命令设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth &lt;password&gt;</span><br></pre></td></tr></table></figure></li><li><p>slave配置文件设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth &lt;password&gt;</span><br></pre></td></tr></table></figure></li><li><p>slave启动服务器设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server –a &lt;password&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-主从数据同步原理"><a href="#3-主从数据同步原理" class="headerlink" title="3. 主从数据同步原理"></a>3. 主从数据同步原理</h2><h3 id="3-1-全量同步"><a href="#3-1-全量同步" class="headerlink" title="3.1 全量同步"></a>3.1 全量同步</h3><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将master节点的所有数据都拷贝给slave节点，流程：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190004847.png" alt="image-20220903190004847"></p><p>这里有一个问题，master如何得知salve是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li><strong>offset</strong>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据。</p><p>因为slave原本也是一个master，有自己的replid和offset，当第一次变成slave，与master建立连接时，发送的replid和offset是自己的replid和offset。</p><p>master判断发现slave发送来的replid与自己的不一致，说明这是一个全新d的slave，就知道要做全量同步了。</p><p>master会将自己的replid和offset都发送给这个slave，slave保存这些信息。以后slave的replid就与master一致了。</p><p>因此，<strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。</p><p>如图：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190031928.png" alt="image-20220903190031928"></p><p>完整流程描述：</p><ul><li>slave节点请求增量同步</li><li>master节点判断replid，发现不一致，拒绝增量同步</li><li>master将完整内存数据生成RDB，发送RDB到slave</li><li>slave清空本地数据，加载master的RDB</li><li>master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave</li><li>slave执行接收到的命令，保持与master之间的同步</li></ul><h3 id="3-2-增量同步"><a href="#3-2-增量同步" class="headerlink" title="3.2 增量同步"></a>3.2 增量同步</h3><p>全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新slave与master存在差异的部分数据。如图：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190135225.png" alt="image-20220903190135225"></p><p>那么master怎么知道slave与自己的数据差异在哪里呢?</p><h3 id="3-3-repl-backlog原理"><a href="#3-3-repl-backlog原理" class="headerlink" title="3.3 repl_backlog原理"></a>3.3 repl_backlog原理</h3><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的repl_baklog文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190256024.png" alt="image-20220903190256024"></p><p>slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。</p><p>随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190317020.png" alt="image-20220903190317020"></p><p>直到数组被填满:</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190331696.png" alt="image-20220903190331696"></p><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190349475.png" alt="image-20220903190349475"></p><p>如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190403261.png" alt="image-20220903190403261"></p><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果slave恢复，需要同步，却发现自己的offset都没有了，无法完成增量同步了。只能做全量同步。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190422168.png" alt="image-20220903190422168"></p><h3 id="3-4-心跳机制"><a href="#3-4-心跳机制" class="headerlink" title="3.4 心跳机制"></a>3.4 心跳机制</h3><p>进入命令传播阶段候， master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><p>master心跳：</p><ul><li>指令：PING</li><li>周期：由repl-ping-slave-period决定，默认10秒</li><li>作用：判断slave是否在线</li><li>查询：INFO replication  获取slave最后一次连接时间间隔， lag项维持在0或1视为正常</li></ul><p>slave心跳任务:</p><ul><li>指令：REPLCONF ACK {offset}</li><li>周期：1秒</li><li>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li><li>作用2：判断master是否在线</li></ul><p><strong>心跳阶段注意事项</strong></p><p>当slave多数掉线，或延迟过高时， master为保障数据稳定性，将拒绝所有信息同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 2</span><br><span class="line">min-slaves-max-lag 8</span><br></pre></td></tr></table></figure><p>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步  </p><ul><li>slave数量由slave发送REPLCONF ACK命令做确认</li><li>slave延迟由slave发送REPLCONF ACK命令做确认</li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903194658003.png" alt="image-20220903194658003"></p><h3 id="3-4-主从同步优化"><a href="#3-4-主从同步优化" class="headerlink" title="3.4 主从同步优化"></a>3.4 主从同步优化</h3><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p>主从从架构图：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903190827831.png" alt="image-20220903190827831"></p><h3 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h3><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在repl_baklog中能找到offset时</li></ul>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据删除与淘汰策略</title>
      <link href="/posts/7839a899.html"/>
      <url>/posts/7839a899.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis数据删除与淘汰策略"><a href="#Redis数据删除与淘汰策略" class="headerlink" title="Redis数据删除与淘汰策略"></a>Redis数据删除与淘汰策略</h1><h2 id="1-Redis中的数据特征"><a href="#1-Redis中的数据特征" class="headerlink" title="1. Redis中的数据特征"></a>1. Redis中的数据特征</h2><p>Redis是一种内存级数据库，所有数据均放在内存中，内存中的数据可以根据 <code>TTL</code> 指令获取其状态。</p><ul><li>xx：具有时效性的数据</li><li>-1：永久有效的数据</li><li>-2：已经过期的数据 或 被删除的数据 或 未定义的数据</li></ul><h3 id="1-1-时效性数据的存储结构"><a href="#1-1-时效性数据的存储结构" class="headerlink" title="1.1 时效性数据的存储结构"></a>1.1 时效性数据的存储结构</h3><p>Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903110214834.png" alt="image-20220903110214834"></p><p>过期字典是存储在 redisDb 这个结构里的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    dict *dict;     <span class="comment">//数据库键空间,保存着数据库中所有键值对</span></span><br><span class="line">    dict *expires   <span class="comment">// 过期字典,保存着键的过期时间</span></span><br><span class="line">    ...</span><br><span class="line">&#125; redisDb;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-数据删除策略"><a href="#2-数据删除策略" class="headerlink" title="2. 数据删除策略"></a>2. 数据删除策略</h2><ol><li>定时删除</li><li>惰性删除</li><li>定期删除</li></ol><p><strong>数据删除策略的目标</strong></p><p>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或内存泄露。</p><h3 id="2-1-定时删除"><a href="#2-1-定时删除" class="headerlink" title="2.1 定时删除"></a>2.1 定时删除</h3><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作  </p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903110130498.png" alt="image-20220903110130498"></p><p>优点：节约内存，到时就删除，快速释放掉不必要的内存占用</p><p>缺点： CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p><p>总结：用处理器性能换取存储空间（拿时间换空间）</p><h3 id="2-2-惰性删除"><a href="#2-2-惰性删除" class="headerlink" title="2.2 惰性删除"></a>2.2 惰性删除</h3><p>数据到达过期时间，不做处理。等下次访问该数据时</p><ul><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903110832025.png" alt="image-20220903110832025"></p><p>优点：节约CPU性能，发现必须删除的时候才删除</p><p>缺点：内存压力很大，出现长期占用内存的数据</p><p>总结：用存储空间换取处理器性能（拿时间换空间）</p><h3 id="2-3-定期删除"><a href="#2-3-定期删除" class="headerlink" title="2.3 定期删除"></a>2.3 定期删除</h3><blockquote><p>两种方案都走极端，有没有折中方案？  </p></blockquote><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903111712055.png" alt="image-20220903111712055"></p><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903111438004.png" alt="image-20220903111438004"></p><p>activeExpireCycle()对每个expires[*]逐一进行检测，每次执行250ms&#x2F;server.hz</p><p>对某个expires[*]检测时，随机挑选W个key检测</p><ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程</li><li>如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]， 0-15循环</li><li>W取值&#x3D;ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul><p>参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行</p><p>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行</p><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度  </p><p>特点1： CPU性能占用设置有峰值，检测频度可自定义设置</p><p>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</p><p>总结：周期性抽查存储空间（随机抽查，重点抽查）</p><h3 id="2-4-删除策略对比"><a href="#2-4-删除策略对比" class="headerlink" title="2.4 删除策略对比"></a>2.4 删除策略对比</h3><ol><li>定时删除<ul><li>节约内存，无占用</li><li>不分时段占用CPU资源，频度高</li><li>拿时间换空间</li></ul></li><li>惰性删除<ul><li>内存占用严重</li><li>延时执行， CPU利用率高</li><li>拿空间换时间</li></ul></li><li>定期删除<ul><li>内存定期随机清理</li><li>每秒花费固定的CPU资源维护内存</li><li>随机抽查，重点抽查</li></ul></li></ol><h2 id="3-数据淘汰策略"><a href="#3-数据淘汰策略" class="headerlink" title="3. 数据淘汰策略"></a>3. 数据淘汰策略</h2><p>当新数据进入redis时，如果内存不足怎么办？</p><p>Redis使用内存存储数据，在执行每一个命令前，会调用<code>freeMemoryIfNeeded()</code>检测内存是否充足。如果内存不满足新加入数据的最低存储要求， redis要临时删除一些数据为当前指令清理存储空间。<strong>清理数据的策略称为逐出算法</strong>。  </p><p>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(error) OOM <span class="built_in">command</span> not allowed when used memory &gt;<span class="string">&#x27;maxmemory&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-影响数据淘汰策略的相关配置"><a href="#3-1-影响数据淘汰策略的相关配置" class="headerlink" title="3.1 影响数据淘汰策略的相关配置"></a>3.1 影响数据淘汰策略的相关配置</h3><ol><li><p>最大可使用内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory</span><br></pre></td></tr></table></figure><p>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。  </p></li><li><p>每次选取待删除数据的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples</span><br></pre></td></tr></table></figure><p>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据  </p></li><li><p>删除策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy</span><br></pre></td></tr></table></figure><p>达到最大内存后的，对被挑选出来的数据进行删除的策略</p></li></ol><h3 id="3-2-删除-淘汰-策略"><a href="#3-2-删除-淘汰-策略" class="headerlink" title="3.2 删除(淘汰)策略"></a>3.2 删除(淘汰)策略</h3><ul><li><p>检测易失数据（可能会过期的数据集server.db[i].expires ）</p><ol><li><code>volatile-lru</code>（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><code>volatile-lfu</code>（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰</li><li><code>volatile-ttl</code>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><code>volatile-random</code>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li></ol></li><li><p>检测全库数据（所有数据集server.db[i].dict ）</p><ol><li><code>allkeys-lru</code>（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li><li><code>allkeys-lfu</code>（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li><li><code>allkeys-random</code>：从数据集（server.db[i].dict）中任意选择数据淘汰</li></ol></li><li><p>放弃数据驱逐</p><ol><li><code>no-eviction</code>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li></ol></li></ul><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220903120059567.png" alt="image-20220903120059567"></p><h3 id="3-3-数据逐出策略配置依据"><a href="#3-3-数据逐出策略配置依据" class="headerlink" title="3.3 数据逐出策略配置依据"></a>3.3 数据逐出策略配置依据</h3><p>使用INFO命令输出监控信息，查询缓存 hit 和 miss 的次数，根据业务需求调优Redis配置  </p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的持久化</title>
      <link href="/posts/195f683a.html"/>
      <url>/posts/195f683a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h1><p>Redis是一个基于内存的数据库，所有的数据都存放在内存中，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。</p><p>Redis的持久化机制有两种，第一种是RDB快照，第二种是AOF日志。RDB快照是一次全量备份，AOF是连续的增量备份。快照是内存数据的二进制序列化形式，在存储上非常紧凑，而 AOF 日志记录的是内存数据修改的指令记录文本</p><h2 id="1-RDB持久化"><a href="#1-RDB持久化" class="headerlink" title="1. RDB持久化"></a>1. RDB持久化</h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p><h3 id="1-1-执行时机"><a href="#1-1-执行时机" class="headerlink" title="1.1 执行时机"></a>1.1 执行时机</h3><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p><strong>1、执行save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902151306413.png" alt="image-20220902151306413"></p><p>save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。如果数据量大的话会造成长时间的阻塞，所以线上环境一般禁止使用,一般只有在数据迁移时可能用到。</p><p><strong>2、执行bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902151631568.png" alt="image-20220902151631568"></p><p>这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3、Redis停机时</strong></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p><strong>4、触发RDB条件时</strong></p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000 </span></span><br></pre></td></tr></table></figure><p>RDB的其它配置也可以在redis.conf文件中设置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RDB文件名称</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件保存的路径目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./ </span></span><br></pre></td></tr></table></figure><h3 id="1-2-RDB原理"><a href="#1-2-RDB原理" class="headerlink" title="1.2 RDB原理"></a>1.2 RDB原理</h3><p>执行bgsave命令时，Redis主进程会fork一个子进程来完成RDB的过程，会先将数据写入到一个临时二进制文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件（可以理解为Copy On Write机制）。Redis主进程阻塞时间只有fork阶段的那一下。相对于save，阻塞时间很短。基本上 Redis 内部所有的RDB操作都是采用 bgsave 命令。</p><p>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><blockquote><p>fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p></blockquote><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902152351517.png" alt="image-20220902152351517"></p><h3 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h3><p><strong>RDB执行流程：</strong></p><ol><li>执行bgsave命令的时候，Redis主进程会检查是否有子进程在执行RDB&#x2F;AOF持久化任务，如果有的话，直接返回，主要是为了性能的考虑，防止两个进程同时对磁盘进行写入操作</li><li>Redis主进程fork一个子进程来执行执行RDB操作，fork操作会对主进程造成阻塞（影响Redis的读写），fork操作完成后会发消息给主进程，从而不再阻塞主进程（阻塞仅指主进程fork子进程的过程，后续子进程执行操作时不会阻塞）</li><li>RDB子进程把Redis主进程的内存数据，写入到一个临时的快照文件，持久化完成后，再使用临时快照文件替换掉原来的RDB文件。（该过程中主进程的读写不受影响，但Redis的写操作不会同步到主进程的主内存中，而是会写到一个临时的内存区域作为一个副本）</li><li>子进程完成RDB持久化后会发消息给主进程，通知RDB持久化完成，并将步骤（3）中的内存副本中的增量写数据同步到主内存</li></ol><p><strong>优势：</strong></p><ol><li>RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</li><li>对于大规模数据的恢复，且对于数据恢复的完整性不是非常敏感的场景，RDB的恢复速度要比AOF方式更加的高效。</li><li>生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</li></ol><p><strong>劣势：</strong></p><ol><li>fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑。</li><li>当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存子进程不会反应出来，所以在快照持久化期间修改的数据不会被保存，可能丢失数据。</li><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ol><hr><h2 id="2-AOF持久化"><a href="#2-AOF持久化" class="headerlink" title="2. AOF持久化"></a>2. AOF持久化</h2><p>每次都使用RDB机制全量备份的方式是非常耗时间的，因此Redis还提供了另一种持久化机制AOF（append only file）。AOF日志是持续增量的备份，将Redis执行过的每个写操作以日志的形式记录下来(读操作不记录)，只许追加文件但不可以改写文件(appendonly.aof文件)。redis启动的时候会读取该文件进行数据恢复，根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="2-1-AOF原理"><a href="#2-1-AOF原理" class="headerlink" title="2.1 AOF原理"></a>2.1 AOF原理</h3><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902153733141.png" alt="image-20220902153733141"></p><h3 id="2-2-AOF配置"><a href="#2-2-AOF配置" class="headerlink" title="2.2 AOF配置"></a>2.2 AOF配置</h3><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启AOF功能，默认是no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># AOF文件的名称</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">always </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">no</span></span><br></pre></td></tr></table></figure><p>三种策略对比：</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902153828843.png" alt="image-20220902153828843"></p><h3 id="2-3-AOF文件重写"><a href="#2-3-AOF文件重写" class="headerlink" title="2.3 AOF文件重写"></a>2.3 AOF文件重写</h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行<code>bgrewriteaof</code>命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902153939385.png" alt="image-20220902153939385"></p><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><p><strong>重写原理</strong>：AOF文件持续增长而过大时，会fork出一条新进程来重写aof文件，将内存中的整个数据库内容用命令的方式重写了一个新的aof文件（注意：在重写时并不是读取旧的aof文件），在执行 BGREWRITEAOF 命令时，Redis 服务器会维护一个 AOF 重写缓冲区，该缓冲区会在子进程创建新AOF文件期间，记录服务器执行的所有写命令。当子进程完成创建新AOF文件的工作之后，服务器会将重写缓冲区中的所有内容追加到新AOF文件的末尾，使得新旧两个AOF文件所保存的数据库状态一致。最后，服务器用新的AOF文件替换旧的AOF文件，以此来完成AOF文件重写操作。</p><p>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span></span><br><span class="line"><span class="attr">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="comment"># AOF文件体积最小多大以上才触发重写 </span></span><br><span class="line"><span class="attr">auto-aof-rewrite-min-size</span> <span class="string">64mb </span></span><br></pre></td></tr></table></figure><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h3><p><strong>优点：</strong></p><ol><li>AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。</li><li>AOF只是追加写日志文件，对服务器性能影响较小，速度比RDB要快，消耗的内存较少</li><li>AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</li><li>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据。</li></ol><p><strong>劣势：</strong></p><ol><li>对于相同数据集的数据而言，aof文件要远大于rdb文件，恢复速度慢于rdb。</li><li>对于每秒一次同步的情况，aof运行效率要慢于rdb，不同步效率和rdb相同。</li></ol><p><strong>RDB和AOF的对比</strong></p><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用</p><p><img src="https://blog-1309755336.cos.ap-guangzhou.myqcloud.com/images/image-20220902154439792.png" alt="image-20220902154439792"></p><blockquote><p>注：如果同时开启两种持久化方式，在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p></blockquote><h2 id="3-Redis4-0的混合持久化"><a href="#3-Redis4-0的混合持久化" class="headerlink" title="3. Redis4.0的混合持久化"></a>3. Redis4.0的混合持久化</h2><ul><li>仅使用RDB快照方式恢复数据，由于快照时间粒度较大时，会丢失大量数据。</li><li>仅使用AOF重放方式恢复数据，日志性能相对 rdb 来说要慢。在 Redis 实例很大的情况下，启动需要花费很长的时间。</li></ul><p>为了解决这个问题，Redis4.0开始支持RDB和AOF的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。RDB 文件的内容和增量的 AOF 日志文件存在一起，这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小。</p><ul><li>大量数据使用粗粒度（时间上）的rdb快照方式，性能高，恢复时间快。</li><li>增量数据使用细粒度（时间上）的AOF日志方式，尽量保证数据的不丢失。</li></ul><p>在Redis重启时，进行AOF重写的时候就直接把RDB的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB和 AOF 的优点，快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是AOF 格式，可读性较差。</p><p>另外，可以使用下面这种方式：Master使用AOF，Slave使用RDB快照，master需要首先确保数据完整性，它作为数据备份的第一选择；slave提供只读服务或仅作为备机，它的主要目的就是快速响应客户端read请求或灾切换。</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>category</title>
      <link href="/category/index.html"/>
      <url>/category/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 *//* .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;} */a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource>svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts>.recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside>div>button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #49b1f5;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 *//* body {    cursor: url('/img/x1.cur'), auto;} */a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
